# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_accept_language $lang {
        default en_US;
        ~fr fr_FR;
        ~en en_FR;
}
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}
# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  '' close;
}
client_max_body_size 0;
gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
log_format vhost '$host $remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent '
                 '"$http_referer" "$http_user_agent"';
access_log off;
# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
proxy_cache_path /tmp/cache levels=1:2 keys_zone=PROXY_CACHE:50m max_size=100m inactive=60m;
limit_req_zone $server_name zone=perserver:10m rate=10r/s;
limit_req_status 429;
proxy_read_timeout    600s;
server {
        server_name _; # This is just an invalid value which will never trigger on a real hostname.
        listen 80;
        access_log /var/log/nginx/access.log vhost;
        return 503;
}
server {
        server_name _; # This is just an invalid value which will never trigger on a real hostname.
        listen 443 ssl http2;
        access_log /var/log/nginx/access.log vhost;
        return 503;
        ssl_certificate /path/to/certificate.cer;
        ssl_certificate_key /path/to/certificate.key;
}
upstream scanr-admin.local {
                        # scanr-backend-workflow
                                # Looking by container name. REMINDER -> connect NGINX to container network
                                server scanr-backend-workflow:8080;
}
server {
        server_name scanr-admin.local;
        listen 80 ;
        access_log /var/log/nginx/access.log vhost;
        include /etc/nginx/vhost.d/default;
        location /api {
                proxy_pass http://scanr-admin.local;
        }
}
server {
        server_name scanr-admin.local;
        listen 443 ssl http2 ;
        access_log /var/log/nginx/access.log vhost;
        return 503;
        ssl_certificate /path/to/certificate.cer;
                ssl_certificate_key /path/to/certificate.key;
}
upstream scanr-admin.local {
		# scanr-backend-workflow
		# Looking by container name. REMINDER -> connect NGINX to container network
		server scanr-backend-workflow:8080;
}
server {
        server_name scanr-admin.local;
        listen 80 ;
        access_log /var/log/nginx/access.log vhost;
        location / {
            return 301 https://$host$request_uri;
        }
        location /.well-known/ {
            auth_basic off;
            allow all;
            root /usr/share/nginx/html;
            try_files $uri =404;
            break;
        }
}
server {
        server_name scanr-admin.local;
        listen 443 ssl http2 ;
        access_log /var/log/nginx/access.log vhost;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA;
        ssl_prefer_server_ciphers on;
        ssl_session_timeout 5m;
        ssl_session_cache shared:SSL:50m;
        ssl_certificate /path/to/certificate.cer;
		ssl_certificate_key /path/to/certificate.key;
        add_header Strict-Transport-Security "max-age=31536000";
        include /etc/nginx/vhost.d/scanr-admin.local;
        
        location /api {
            auth_basic  "Restricted scanr-admin.local";
            auth_basic_user_file        /etc/nginx/htpasswd/scanr-admin.local;
            proxy_pass http://scanr-admin.local;
            include /etc/nginx/vhost.d/scanr-admin.local_location;
        }
        location /kibana {
            proxy_pass https://scanr-kibana:5601/;
            rewrite ^/kibana/(.*)$ /$1 break;
        }
        
        proxy_max_temp_file_size 0;
        proxy_read_timeout 600;
        proxy_connect_timeout 600;
        proxy_send_timeout 600;
}
upstream scanr-api.enseignementsup-recherche.gouv.fr {
                        # scanr-backend-app
                                # Looking by container name. REMINDER -> connect NGINX to container network
                                server scanr-backend-app:8080;
}
upstream scanr-elasticsearch.local {
    server scanr-elasticsearch:9200;
}
server {
        server_name scanr-api.enseignementsup-recherche.gouv.fr;
        listen 80 ;
        access_log /var/log/nginx/access.log vhost;
        location / {
            return 301 https://$host$request_uri;
        }
        location /.well-known/ {
            auth_basic off;
            allow all;
            root /usr/share/nginx/html;
            try_files $uri =404;
            break;
        }
}
server {
        server_name scanr-api.enseignementsup-recherche.gouv.fr;
        listen 443 ssl http2 ;
        access_log /var/log/nginx/access.log vhost;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA;
        ssl_prefer_server_ciphers on;
        ssl_session_timeout 5m;
        ssl_session_cache shared:SSL:50m;
        ssl_certificate /etc/nginx/certs/scanr-api.enseignementsup-recherche.gouv.fr.crt;
        ssl_certificate_key /etc/nginx/certs/scanr-api.enseignementsup-recherche.gouv.fr.key;
        add_header Strict-Transport-Security "max-age=31536000";
        include /etc/nginx/vhost.d/default;
        location /api {
            proxy_pass http://scanr-api.enseignementsup-recherche.gouv.fr;
        }
        location = /elasticsearch {
            return 302 /elasticsearch/;
        }
        location /elasticsearch/ {
            proxy_pass https://scanr-elasticsearch.local/;
        }
        
        proxy_max_temp_file_size 0;
        proxy_read_timeout 600;
        proxy_connect_timeout 600;
        proxy_send_timeout 600;
}
upstream scanr.local {
                        # scanr-backend-app
                                # Looking by container name. REMINDER -> connect NGINX to container network
                                server scanr-backend-app:8080;
}
server {
        server_name scanr.local;
        listen 80 ;
        access_log /var/log/nginx/access.log vhost;
        include /etc/nginx/vhost.d/default;
        location /api {
                proxy_pass http://scanr.local;
        }
}
server {
        server_name scanr.local;
        listen 443 ssl http2 ;
        access_log /var/log/nginx/access.log vhost;
        return 503;
        ssl_certificate /path/to/certificate.cer;
		ssl_certificate_key /path/to/certificate.key;
}
upstream scanr.local {
                        # scanr-backend-app
                                # Looking by container name. REMINDER -> connect NGINX to container network
                                server scanr-backend-app:8080;
}
server {
        server_name scanr.local;
        listen 80 ;
        access_log /var/log/nginx/access.log vhost;
        include /etc/nginx/vhost.d/default;
        location /api {
                proxy_pass http://scanr.local;
        }
}
server {
        server_name scanr.local;
        listen 443 ssl http2 ;
        access_log /var/log/nginx/access.log vhost;
        return 503;
        ssl_certificate /path/to/certificate.cer;
		ssl_certificate_key /path/to/certificate.key;
}
