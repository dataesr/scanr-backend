# This configuration is specific to dev env.
# It's generated from nginx-gen and adapted by hand for default proxy
# We don't want the auto generated configuration because http redirect automatically to https and make an infinite loop
# In this configuration, we just copied 443 configuration to 80

# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_accept_language $lang {
        default en_US;
        ~fr fr_FR;
        ~en en_FR;
}
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}
# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  '' close;
}
client_max_body_size 0;
gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
log_format vhost '$host $remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent '
                 '"$http_referer" "$http_user_agent"';
access_log off;
# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
proxy_read_timeout 600s;
proxy_cache_path /tmp/cache levels=1:2 keys_zone=PROXY_CACHE:8m max_size=100m inactive=60m;
limit_req_zone $server_name zone=perserver:10m rate=10r/s;
limit_req_status 429;
server {
        server_name _; # This is just an invalid value which will never trigger on a real hostname.
        listen 80;
        access_log /var/log/nginx/access.log vhost;
        return 503;
}
server {
        server_name _; # This is just an invalid value which will never trigger on a real hostname.
        listen 443 ssl http2;
        access_log /var/log/nginx/access.log vhost;
        return 503;
        ssl_certificate /etc/nginx/certs/default.crt;
                                ssl_certificate_key /etc/nginx/certs/default.key;
}
upstream scanr-admin.local {
                        # scanr-backend-workflow
                                # Looking by container name. REMINDER -> connect NGINX to container network
                                server scanr-backend-workflow:8080;
}
server {
        server_name scanr-admin.local;
        listen 80 ;
        access_log /var/log/nginx/access.log vhost;
        include /etc/nginx/vhost.d/scanr-admin;
        location /api {
                proxy_pass http://scanr-admin.local;
        }
}
server {
        server_name scanr-admin.local;
        listen 443 ssl http2 ;
        access_log /var/log/nginx/access.log vhost;
        return 503;
        ssl_certificate /etc/nginx/certs/default.crt;
        ssl_certificate_key /etc/nginx/certs/default.key;
}
upstream scanr.local {
                        # scanr-backend-app
                                # Looking by container name. REMINDER -> connect NGINX to container network
                                server scanr-backend-app:8080;
}
server {
        server_name scanr.local;
        listen 80 ;
        access_log /var/log/nginx/access.log vhost;
        include /etc/nginx/vhost.d/scanr;
        location /api {
                proxy_pass http://scanr.local;
        }
}
server {
        server_name scanr.local;
        listen 443 ssl http2 ;
        access_log /var/log/nginx/access.log vhost;
        return 503;
        ssl_certificate /etc/nginx/certs/default.crt;
        ssl_certificate_key /etc/nginx/certs/default.key;
}

upstream scanr-es.local {
	server scanr-elasticsearch:9200;
}
server {
	server_name scanr-es.local;
	listen 443 ssl http2 ;
	ssl_certificate /etc/nginx/certs/default.crt;
	ssl_certificate_key /etc/nginx/certs/default.key;
	location / {
		proxy_pass https://scanr-es.local;
	}
}

upstream scanr-kibana.local {
	server scanr-kibana:5601;
}
server {
	server_name scanr-kibana.local;
	listen 443 ssl http2 ;
	ssl_certificate /etc/nginx/certs/default.crt;
	ssl_certificate_key /etc/nginx/certs/default.key;
	location / {
		proxy_pass https://scanr-kibana.local;
	}
}
