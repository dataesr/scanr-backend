#
# NOTE: THIS DOCKERFILE IS GENERATED VIA "update.sh"
#
# PLEASE DO NOT EDIT IT DIRECTLY.
#

FROM debian:jessie

# ensure local python is preferred over distribution python
ENV PATH /usr/local/bin:$PATH

# http://bugs.python.org/issue19846
# > At the moment, setting "LANG=C" on a Linux system *fundamentally breaks Python 3*, and that's not OK.
ENV LANG C.UTF-8

# runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
		ca-certificates \
		libgdbm3 \
		libsqlite3-0 \
		libssl1.0.0 \
	&& rm -rf /var/lib/apt/lists/*

ENV GPG_KEY 97FC712E4C024BBEA48A61ED3A5CA953F73C700D
ENV PYTHON_VERSION 3.5.3

# if this is called "PIP_VERSION", pip explodes with "ValueError: invalid truth value '<VERSION>'"
ENV PYTHON_PIP_VERSION 19.2.3

RUN set -ex \
	&& buildDeps=' \
		gcc \
		libbz2-dev \
		libc6-dev \
		libgdbm-dev \
		liblzma-dev \
		libncurses-dev \
		libreadline-dev \
		libsqlite3-dev \
		libssl-dev \
		make \
		tcl-dev \
		tk-dev \
		wget \
		xz-utils \
		zlib1g-dev \
	' \
	&& apt-get update && apt-get install -y $buildDeps --no-install-recommends && rm -rf /var/lib/apt/lists/* \
	\
	&& wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz" \
	&& wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc" \
	&& export GNUPGHOME="$(mktemp -d)" \
	&& gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY" \
	&& gpg --batch --verify python.tar.xz.asc python.tar.xz \
	&& rm -r "$GNUPGHOME" python.tar.xz.asc \
	&& mkdir -p /usr/src/python \
	&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \
	&& rm python.tar.xz \
	\
	&& cd /usr/src/python \
	&& ./configure \
		--enable-loadable-sqlite-extensions \
		--enable-shared \
	&& make -j$(nproc) \
	&& make install \
	&& ldconfig \
	\
# explicit path to "pip3" to ensure distribution-provided "pip3" cannot interfere
	&& if [ ! -e /usr/local/bin/pip3 ]; then : \
		&& wget -O /tmp/get-pip.py 'https://bootstrap.pypa.io/get-pip.py' \
		&& python3 /tmp/get-pip.py "pip==$PYTHON_PIP_VERSION" \
		&& rm /tmp/get-pip.py \
	; fi \
# [SWORD] else in the next line error --no-cache-dir: unknown option, TODO try to remove the next line
	&& pip3 install --upgrade --force-reinstall "pip==$PYTHON_PIP_VERSION" \
# we use "--force-reinstall" for the case where the version of pip we're trying to install is the same as the version bundled with Python
# ("Requirement already up-to-date: pip==8.1.2 in /usr/local/lib/python3.6/site-packages")
# https://github.com/docker-library/python/pull/143#issuecomment-241032683
	&& pip3 install --no-cache-dir --upgrade --force-reinstall "pip==$PYTHON_PIP_VERSION" \
# then we use "pip list" to ensure we don't have more than one pip version installed
# https://github.com/docker-library/python/pull/100
	&& [ "$(pip list |tac|tac| awk -F '[ ()]+' '$1 == "pip" { print $2; exit }')" = "$PYTHON_PIP_VERSION" ] \
	\
	&& find /usr/local -depth \
		\( \
			\( -type d -a -name test -o -name tests \) \
			-o \
			\( -type f -a -name '*.pyc' -o -name '*.pyo' \) \
		\) -exec rm -rf '{}' + \
	&& apt-get purge -y --auto-remove $buildDeps \
	&& rm -rf /usr/src/python ~/.cache

# make some useful symlinks that are expected to exist
RUN cd /usr/local/bin \
	&& { [ -e easy_install ] || ln -s easy_install-* easy_install; } \
	&& ln -s idle3 idle \
	&& ln -s pydoc3 pydoc \
	&& ln -s python3 python \
	&& ln -s python3-config python-config


# step 2: install the datascience dependencies & wheelhouse
ENV WHEELHOUSE=/wheelhouse
ENV PIP_WHEEL_DIR=/wheelhouse
ENV PIP_FIND_LINKS=/wheelhouse

RUN apt-get update && apt-get install -y  \
	libmagic1 \
	git \
	libreadline6-dev \
	build-essential \
	libxml2-dev \
	libxslt1-dev \
	zlib1g-dev \
	libssl-dev \
	libbz2-dev \
	libsqlite3-dev \
	libblas-dev \
	liblapack-dev \
	libatlas-dev \
	gfortran \
	libumfpack5.6.2 \
	libatlas-base-dev \
	libsuitesparse-dev \
	libopenblas-dev \
	swig \
	wget \
	locales \
	&& echo "Europe/Paris" > /etc/timezone && \
    dpkg-reconfigure -f noninteractive tzdata && \
    sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && \
    echo 'LANG="en_US.UTF-8"'>/etc/default/locale && \
    dpkg-reconfigure --frontend=noninteractive locales && \
    update-locale LANG=en_US.UTF-8

ENV LC_ALL en_US.UTF-8 

RUN mkdir $WHEELHOUSE

# step 3 install & update common components
RUN pyvenv /appenv && . /appenv/bin/activate && pip install -U pip  && pip install -U wheel nose coverage pep8 sphinx

# [SWORD]
# NB. also expands archive
ADD companies_plugin*.tar.gz /tmp
ADD entities_extractor*.tar.gz /tmp
ADD fastmatch*.tar.gz /tmp
ADD cstore_api*.tar.gz /tmp
ADD textmining*.tar.gz /tmp
ADD webmining*.tar.gz /tmp

RUN ls -l /tmp/
# Each RUN statement is effectively run in a separate shell from the previous RUN statement https://www.reddit.com/r/Python/comments/72v16x/how_can_i_have_virtualenv_set_in_a_docker/?st=ji3cv4cy&sh=97cfd92d
RUN . /appenv/bin/activate && \
    cd /tmp/companies_plugin* && ./tools/deps.sh && ./tools/install.sh && \
    cd /tmp/entities_extractor* && ./tools/deps.sh && ./tools/install.sh && \
    cd /tmp/fastmatch* && ./tools/deps.sh && ./tools/install.sh && \
    cd /tmp/cstore_api* && ./tools/deps.sh && ./tools/install.sh && \
    cd /tmp/textmining* && ./tools/deps.sh && ./tools/install.sh && \
    cd /tmp/webmining* && ./tools/deps.sh && ./tools/install.sh

CMD ["python3"]

